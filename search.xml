<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>git push错误</title>
    <url>/2021/12/28/git-push%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h1><h2 id="error-log"><a href="#error-log" class="headerlink" title="error log"></a>error log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: AggregateException encountered.</span><br><span class="line">   ▒▒▒▒һ▒▒▒▒▒▒▒▒▒▒</span><br><span class="line">To https://github.com/upon88/upon88.github.io.git</span><br><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;https://ghp_tcsNXkQEnviUzMhnt68H6MSA4QL9bL0E                                     HsFR@github.com/upon88/upon88.github.io.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init    初始化本地仓库</span><br><span class="line">git remote add origin XXX     添加远程仓库地址</span><br></pre></td></tr></table></figure>
<p>如果你在这之后就执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A，</span><br><span class="line">git commit -m <span class="string">&quot; &quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>那么就会出现这个问题(被拒绝)，所以在remote add后不要着急git add，一定要git pull origin master；<br>因为在码云创建的仓库有ReadMe文件，而本地没有，造成本地和远程的不同步。</p>
<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>本地没有ReadMe文件，那么就在本地生成一个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master     本地生成ReadMe文件</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>强制上传覆盖远程文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>
<p>备注：这个命令在团队开发的时候最好不要用,否则可能会有生命危险</p>
]]></content>
  </entry>
  <entry>
    <title>fastboot刷机常用命令</title>
    <url>/2021/12/09/fastboot%E5%88%B7%E6%9C%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="重启进入fastboot模式"><a href="#重启进入fastboot模式" class="headerlink" title="重启进入fastboot模式"></a>重启进入fastboot模式</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<h1 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h1><p>解锁BootLoader的方法是在开发者模式中开起OEM unlocking开关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot devices  //查看设备</span><br><span class="line">fastboot flashing unlock //解锁</span><br></pre></td></tr></table></figure>
<h1 id="fastboot关闭-AVB"><a href="#fastboot关闭-AVB" class="headerlink" title="fastboot关闭 AVB"></a>fastboot关闭 AVB</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot --disable-verity --disable-verification flash vbmeta vbmeta.img</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot --disable-verity flash vbmeta vbmeta.img</span><br><span class="line">fastboot --disable-verity flash vbmeta_system vbmeta_system.img</span><br></pre></td></tr></table></figure>
<p>注意：关闭avb可能失败，还没去找解决方案。</p>
<h1 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot erase system</span><br><span class="line">fastboot erase cache</span><br><span class="line">fastboot erase config</span><br><span class="line">fastboot erase data</span><br><span class="line">fastboot erase logs</span><br><span class="line">fastboot erase factory</span><br></pre></td></tr></table></figure>

<h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash system system.img</span><br><span class="line">fastboot flash recovery recovery.img</span><br></pre></td></tr></table></figure>

<h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>fastboot</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用git生成patch和打入patch</title>
    <url>/2021/12/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%E7%94%9F%E6%88%90patch%E5%92%8C%E6%89%93%E5%85%A5patch/</url>
    <content><![CDATA[<h1 id="生成patch-的方法"><a href="#生成patch-的方法" class="headerlink" title="生成patch 的方法"></a>生成patch 的方法</h1><h2 id="1、git-log-查看有哪一些commit"><a href="#1、git-log-查看有哪一些commit" class="headerlink" title="1、git log 查看有哪一些commit"></a>1、git log 查看有哪一些commit</h2><p><img src="https://raw.githubusercontent.com/upon88/upon88.github.io/master/img/apply_img/git_patch/git_log.png" alt="Image text"></p>
<h2 id="2、把第一次commit-提交以后的（不包括第一次提交）都生成patch"><a href="#2、把第一次commit-提交以后的（不包括第一次提交）都生成patch" class="headerlink" title="2、把第一次commit 提交以后的（不包括第一次提交）都生成patch"></a>2、把第一次commit 提交以后的（不包括第一次提交）都生成patch</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch e795fefabc</span><br></pre></td></tr></table></figure>
<p>然后生成的patch 文件，如下图所示：<br><img src="https://raw.githubusercontent.com/upon88/upon88.github.io/master/img/apply_img/git_patch/git_format.png" alt="Image text"></p>
<h1 id="打入patch-的方法"><a href="#打入patch-的方法" class="headerlink" title="打入patch 的方法"></a>打入patch 的方法</h1><p>把生成的patch 文件copy 到一个文件夹中来（这里我创建了patch 文件夹）。如下图所示<br><img src="https://raw.githubusercontent.com/upon88/upon88.github.io/master/img/apply_img/git_patch/list.png" alt="Image text"><br>在使用git am之前，首先git am –abort 一次，来放弃掉以前的am信息，这样才可以进行一次全新的am。<br>不然会遇到类似以下的错误。<br>  .git/rebase-apply still exists but mbox given.<br>git am 可以一次合并一个文件，或者一个目录下所有的patch，如下图所示：<br><img src="https://raw.githubusercontent.com/upon88/upon88.github.io/master/img/apply_img/git_patch/git_am.png" alt="Image text"></p>
<h1 id="以下是更多制作和打入patch的命令说明"><a href="#以下是更多制作和打入patch的命令说明" class="headerlink" title="以下是更多制作和打入patch的命令说明"></a>以下是更多制作和打入patch的命令说明</h1><h2 id="使用git-format-patch生成所需要的patch"><a href="#使用git-format-patch生成所需要的patch" class="headerlink" title="使用git format-patch生成所需要的patch"></a>使用git format-patch生成所需要的patch</h2><p>当前分支所有超前master的提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch -M master</span><br></pre></td></tr></table></figure>
<p>某次提交以后的所有patch:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 4e16 --4e16指的是commit名</span><br></pre></td></tr></table></figure>
<p>从根到指定提交的所有patch:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch --root 4e16</span><br></pre></td></tr></table></figure>
<p>某两次提交之间的所有patch:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 365a..4e16 --365a和4e16分别对应两次提交的名称</span><br></pre></td></tr></table></figure>
<p>某次提交（含）之前的几次提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch –n 07fe --n指patch数，07fe对应提交的名称</span><br></pre></td></tr></table></figure>
<p>故，单次提交即为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch -1 07fe</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git format-patch 生成的补丁文件默认从1开始顺序编号，并使用对应提交信息中的第一行作为文件名。如果使用了-- numbered-files选项，则文件名只有编号，不包含提交信息；如果指定了--stdout选项，可指定输出位置，如当所有patch输出到一个文件；可指定-o &lt;dir&gt;指定patch的存放目录；</span><br></pre></td></tr></table></figure>
<h2 id="应用-合入-patch"><a href="#应用-合入-patch" class="headerlink" title="应用(合入)patch"></a>应用(合入)patch</h2><p>先检查patch文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply --<span class="built_in">stat</span> newpatch.patch</span><br></pre></td></tr></table></figure>
<p>检查能否应用成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply --check newpatch.patch</span><br></pre></td></tr></table></figure>
<p>打补丁：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git am --signoff &lt; newpatch.patch</span><br></pre></td></tr></table></figure>
<p>(使用-s或–signoff选项，可以commit信息中加入Signed-off-by信息)<br>如果应用patch出现问题：<br>比如，一个典型的git am失败，可能是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git am PATCH</span><br><span class="line">Applying: PACTH DESCRIPTION</span><br><span class="line">error: patch failed: file.c:137</span><br><span class="line">error: file.c: patch does not apply</span><br><span class="line">error: patch failed: Makefile:24</span><br><span class="line">error: libavfilter/Makefile: patch does not apply</span><br><span class="line">Patch failed at 0001 PATCH DESCRIPTION</span><br><span class="line">When you have resolved this problem run &quot;git am --resolved&quot;.</span><br><span class="line">If you would prefer to skip this patch, instead run &quot;git am --skip&quot;.</span><br><span class="line">To restore the original branch and stop patching run &quot;git am --abort&quot;.</span><br></pre></td></tr></table></figure>
<p>正如你所见，如果冲突发生，git只是输出上述信息，然后就停下来。一个小冲突会导致整个patch都不会被集成。</p>
<p>处理这种问题的最简单方法是先使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git am --abort</span><br></pre></td></tr></table></figure>
<p>然后手动的添加此patch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">patch -p1 &lt; PATCH</span><br></pre></td></tr></table></figure>
<p>手动解决掉代码冲突<br>最后使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>
<p>提交代码。</p>
<p>但是这样做有个问题就是你会失去PATCH中原本包含的commit信息（比如From，Date，Subject，Signed-off-by等）。应该有一种更聪明的方法。</p>
<p>在 .git/rebase-apply 目录下，存放着相应的补丁文件，名字是“0001” （在更新的git版本中，存放补丁文件的目录名有所改变，这里使用的git版本是 1.7.4.1）。</p>
<p>事实上，你可以使用 git apply 命令打patch（git apply 是git中的patch命令）。如同使用 patch -p1 命令时一样，然后手动解决代码冲突（检视生成的 .rej 文件，与冲突文件比较，修改冲突内容，并最终把文件加入到index中）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git apply PATCH --reject</span><br><span class="line">$ edit edit edit （译注：根据.rej文件手动解决所有冲突）</span><br><span class="line">$ git add FIXED_FILES</span><br><span class="line">$ git am --resolved</span><br></pre></td></tr></table></figure>
<p>git am 并不改变index<br>需要使用 git apply –reject 打patch（保存在 .git/rebase-apply）手动解决代码冲突，（译注：使用 git status 列出所有涉及文件），把所有文件（不仅仅是引起冲突的文件）添加到（git add）index，最后告诉 git am 你已经解决（–resolved）了问题。这样做的好处是你不需要重新编辑commit信息。而且，如果你正在打的是一系列patch（就是说你在打的是多个patch，比如 git am *.patch）你不需要使用 git am –abort，然后又 git am。<br>参考资料：</p>
<p>Git-format-patch(1) - Linux man page <a href="http://linux.die.net/man/1/git-format-patch">http://linux.die.net/man/1/git-format-patch</a></p>
<p>How to create and apply a patch with Git <a href="http://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git">http://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git</a></p>
]]></content>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/2021/12/03/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="一、查看U盘在Ubuntu上的路径及手动挂载与卸载"><a href="#一、查看U盘在Ubuntu上的路径及手动挂载与卸载" class="headerlink" title="一、查看U盘在Ubuntu上的路径及手动挂载与卸载"></a>一、查看U盘在Ubuntu上的路径及手动挂载与卸载</h1><pre><code>sudo fdisk -l
sudo mount -t  vfat /dev/sdb1  /media
sudo umount /media/
</code></pre>
<h1 id="二、截图命令"><a href="#二、截图命令" class="headerlink" title="二、截图命令"></a>二、截图命令</h1><pre><code>adb shell screencap -p /sdcard/hello.png
adb pull /sdcard/hello.png
</code></pre>
<h1 id="三、git退库"><a href="#三、git退库" class="headerlink" title="三、git退库"></a>三、git退库</h1><pre><code>git branch -a
  git push origin HEAD:refs/for/&lt;branch&gt;
    
</code></pre>
<hr>
<h2 id="https-github-com-jerryc127-hexo-theme-butterfly-使用主题"><a href="#https-github-com-jerryc127-hexo-theme-butterfly-使用主题" class="headerlink" title="   https://github.com/jerryc127/hexo-theme-butterfly     使用主题"></a>   <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a>     使用主题</h2>]]></content>
  </entry>
  <entry>
    <title>user版本remount流程</title>
    <url>/2021/12/09/user%E7%89%88%E6%9C%ACremount%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>先进行unlock操作。可按如下操作进行：<br>1.进入设置，开发者模式，打开OEM unlocking选项.<br>2.adb reboot bootloader进入fastboot模式.<br>3.连接电脑，输入命令fastboot flashing unlock，然后根据命令按音量上键解锁.<br>出现如下提示算成功：<br>4.成功之后输入fastboot reboot重启手机.<br>5.开机之后，依次adb root，adb disable-verity，adb reboot<br>6.开机之后adb root，adb remount.此时成功会提示：<br>然后正常push即可。<br>注：刷机选择升级刷机方式，可不用1-4步骤操作，直接执行5-6即可。</p>
]]></content>
  </entry>
  <entry>
    <title>基于hexo搭建github</title>
    <url>/2021/12/03/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BAgithub/</url>
    <content><![CDATA[<h1 id="一、必备软件"><a href="#一、必备软件" class="headerlink" title="一、必备软件"></a>一、必备软件</h1><h2 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h2><p>a、<a href="https://nodejs.org/dist">下载Node.js</a><br>b、确认安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>
<h2 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h2><p>a、<a href="https://github.com/git-for-windows/git/releases/">下载Git</a><br>b、确认安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<h2 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h2><p>a、打开cmd命令行(win+r 输入cmd回车)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>b、确认安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure>
<h2 id="4、安装markdown工具"><a href="#4、安装markdown工具" class="headerlink" title="4、安装markdown工具"></a>4、安装markdown工具</h2><p><a href="https://atom.io/">下载Atom</a></p>
<h1 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h1><h2 id="hexo配置相关命令"><a href="#hexo配置相关命令" class="headerlink" title="hexo配置相关命令"></a>hexo配置相关命令</h2><p>新建文件夹，然后右键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git bash here</span><br><span class="line">$ npm install hexo --save</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin https://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@github.com/upon88/upon88.github.io.git</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<h1 id="三、windows系统上配置ssh-key-的生成"><a href="#三、windows系统上配置ssh-key-的生成" class="headerlink" title="三、windows系统上配置ssh key 的生成"></a>三、windows系统上配置ssh key 的生成</h1><p>a、key的生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>b、测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h1 id="四、在当前文件夹配置github仓"><a href="#四、在当前文件夹配置github仓" class="headerlink" title="四、在当前文件夹配置github仓"></a>四、在当前文件夹配置github仓</h1><p>根_config.yml中配置自己的远程仓库地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://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@github.com/upon88/upon88.github.io.git  <span class="comment">##这里是需要配置为自己的token、用户名及仓名。</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<h1 id="五、主题"><a href="#五、主题" class="headerlink" title="五、主题"></a>五、主题</h1><p>主题切换，直接在github搜索就可以找到，再根据说明步骤一一操作。</p>
<h1 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h1><p>a、在github中新建仓的名字一定要与用户名一致；<br>b、切换新文件夹或者切换电脑时，一定要重新去生成token。</p>
]]></content>
  </entry>
  <entry>
    <title>常见Android镜像拆封包命令</title>
    <url>/2021/12/21/%E5%B8%B8%E8%A7%81Android%E9%95%9C%E5%83%8F%E6%8B%86%E5%B0%81%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="拆封ramdisk包"><a href="#拆封ramdisk包" class="headerlink" title="拆封ramdisk包"></a>拆封ramdisk包</h1><p>新建文件夹(以下雷同)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir test;cd test;cp XXX/ramdisk.img ./</span><br></pre></td></tr></table></figure>
<p>拆包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir rootfs;cp ramdisk.img rootfs/ ;cd rootfs/;mv ramdisk.img ramdisk.img.gz;gunzip ramdisk.img.gz</span><br><span class="line">mkdir root;cd root;cpio -i -F ../ramdisk.img</span><br></pre></td></tr></table></figure>
<p>封包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd root;find . | cpio -o -H newc &gt;../tmp_ramdisk.img</span><br><span class="line">cd .. ;gzip -c tmp_ramdisk.img &gt; new_ramdisk.img</span><br></pre></td></tr></table></figure>
<h1 id="拆封boot-img包"><a href="#拆封boot-img包" class="headerlink" title="拆封boot.img包"></a>拆封boot.img包</h1><p>新建文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir test;cd test;cp XXX/boot.img ./</span><br></pre></td></tr></table></figure>
<p>拆包工具：unpack_bootimg（需要source/lunch/make unpack_bootimg生成即可）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> unpack_bootimg --boot_img boot.img --out boot-out/</span></span><br><span class="line">boot_magic: ANDROID!</span><br><span class="line">kernel_size: 17983189</span><br><span class="line">kernel load address: 0x20280000</span><br><span class="line">ramdisk size: 0</span><br><span class="line">ramdisk load address: 0x0</span><br><span class="line">second bootloader size: 0</span><br><span class="line">second bootloader load address: 0x0</span><br><span class="line">kernel tags load address: 0x20280100</span><br><span class="line">page size: 2048</span><br><span class="line">os version: 11.0.0</span><br><span class="line">os patch level: 2021-11</span><br><span class="line">boot image header version: 1</span><br><span class="line">product name:</span><br><span class="line">command line args: buildvariant=userdebug</span><br><span class="line">additional command line args:</span><br><span class="line">recovery dtbo size: 0</span><br><span class="line">recovery dtbo offset: 0x0</span><br><span class="line">boot header size: 1648</span><br></pre></td></tr></table></figure>
<p>封包工具：mkbootimg（对应的参数根据解包的参数而定）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkbootimg --cmdline &#x27;buildvariant=userdebug&#x27; --kernel boot-out/kernel --ramdisk boot-out/ramdisk -o new_boot.img --base 0x20280000</span><br></pre></td></tr></table></figure>
<p>注：（通过该命令打包之后，boot.img的大小对不上了，不清楚原因）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l new_boot.img</span><br><span class="line">-rw-rw-r-- 1 root root 17985536 12月 20 15:25 new_boot.img</span><br><span class="line"></span><br><span class="line">ls -l boot.img</span><br><span class="line">-rw-rw-r-- 1 root root 33554432 12月 20 15:10 boot.img</span><br></pre></td></tr></table></figure>
<p>再解压，发现没有dtbo的打印</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> unpack_bootimg --boot_img new_boot.img --out new_boot-out/</span></span><br><span class="line">boot_magic: ANDROID!</span><br><span class="line">kernel_size: 17983189</span><br><span class="line">kernel load address: 0x20288000</span><br><span class="line">ramdisk size: 0</span><br><span class="line">ramdisk load address: 0x0</span><br><span class="line">second bootloader size: 0</span><br><span class="line">second bootloader load address: 0x0</span><br><span class="line">kernel tags load address: 0x20280100</span><br><span class="line">page size: 2048</span><br><span class="line">os version: 0.0.0</span><br><span class="line">os patch level: 2000-00</span><br><span class="line">boot image header version: 0</span><br><span class="line">product name:</span><br><span class="line">command line args: buildvariant=userdebug</span><br><span class="line">additional command line args:</span><br></pre></td></tr></table></figure>

<h1 id="拆dtbo-img包"><a href="#拆dtbo-img包" class="headerlink" title="拆dtbo.img包"></a>拆dtbo.img包</h1><p>提取dtb数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdtimg dump dtbo.img -b my.dtb</span><br></pre></td></tr></table></figure>
<p>将dtb文件转换为dts文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dtc -I dtb -O dts my.dtb.0 -o my.dts</span><br></pre></td></tr></table></figure>
<h1 id="拆封system-img包"><a href="#拆封system-img包" class="headerlink" title="拆封system.img包"></a>拆封system.img包</h1><h2 id="常见格式："><a href="#常见格式：" class="headerlink" title="常见格式："></a>常见格式：</h2><p>1、ext2/3/4<br>直接挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o loop system.img /mnt</span><br></pre></td></tr></table></figure>
<p>Android 10以上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount -t ext4 -o ro system.img /mnt 由于vbmeta原因只能以只读的方式挂载</span><br></pre></td></tr></table></figure>
<p>2、带MBR分区信息的镜像(system_qemu.img)<br>查看信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -lu system_qemu.img</span><br><span class="line">sgdisk --print system_qemu.img</span><br></pre></td></tr></table></figure>
<p>使用dd命令拆解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=vbmeta;start=2048;end=4095 (根据sgdisk命令获取)</span><br><span class="line">dd if=system_qemu.img of=split/$&#123;name&#125;.img skip=$&#123;start&#125; bs=512 count=$(($&#123;end&#125;-$&#123;start&#125;+1))</span><br><span class="line">name=super;start=4096;end=6311935 (根据sgdisk命令获取)</span><br><span class="line">dd if=system_qemu.img of=split/$&#123;name&#125;.img skip=$&#123;start&#125; bs=512 count=$(($&#123;end&#125;-$&#123;start&#125;+1))</span><br></pre></td></tr></table></figure>
<p>解压super.img(system.img+vendor.img)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpunpack super.img</span><br></pre></td></tr></table></figure>
<p>3、sparse image稀疏镜像格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">simg2img system.img system_new.img</span><br><span class="line">sudo mount system_new.img /mnt</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>查看CRT会话中的密文</title>
    <url>/2021/12/08/%E6%9F%A5%E7%9C%8BCRT%E4%BC%9A%E8%AF%9D%E4%B8%AD%E7%9A%84%E5%AF%86%E6%96%87/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>env:(windows10,SecureCRT8.1，python39)</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1、github上下载how-does-SecureCRT-encrypt-password工具"><a href="#1、github上下载how-does-SecureCRT-encrypt-password工具" class="headerlink" title="1、github上下载how-does-SecureCRT-encrypt-password工具"></a>1、github上下载<a href="https://github.com/upon88/how-does-SecureCRT-encrypt-password">how-does-SecureCRT-encrypt-password</a>工具</h2><p>一个python文件 SecureCRTCipher.py ，以及如何使用详细说明，我在后面贴上代码：<br>参数介绍：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    SecureCRTCipher.py &lt;enc|dec&gt; [-v2] [-p ConfigPassphrase] &lt;plaintext|ciphertext&gt;</span><br><span class="line"></span><br><span class="line">    &lt;enc|dec&gt;              &quot;enc&quot; for encryption, &quot;dec&quot; for decryption.</span><br><span class="line">                           This parameter must be specified.（加密|解密）必选项</span><br><span class="line"></span><br><span class="line">    [-v2]                  Encrypt/Decrypt with &quot;Password V2&quot; algorithm.</span><br><span class="line">                           This parameter is optional.（如果加密使用的是Password V2算法则加上这个参数）可选项</span><br><span class="line"></span><br><span class="line">    [-p ConfigPassphrase]  The config passphrase that SecureCRT uses.</span><br><span class="line">                           This parameter is optional.（如果你的SecureCRT打开时要密码，则要加上这个参数，并在后面加上你使用的密码）可选项</span><br><span class="line"></span><br><span class="line">    &lt;plaintext|ciphertext&gt; Plaintext string or ciphertext string.</span><br><span class="line">                           NOTICE: Ciphertext string must be a hex string.</span><br><span class="line">                           This parameter must be specified.（明文或密文，密文必须是16进制的字符串）必选项</span><br></pre></td></tr></table></figure>
<h2 id="2、安装Python"><a href="#2、安装Python" class="headerlink" title="2、安装Python"></a>2、<a href="https://www.python.org/downloads/windows/">安装Python</a></h2><h2 id="3、安装pycryptodome模块"><a href="#3、安装pycryptodome模块" class="headerlink" title="3、安装pycryptodome模块"></a>3、安装pycryptodome模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure>
<h2 id="4、找到SecureCRT会话配置文件"><a href="#4、找到SecureCRT会话配置文件" class="headerlink" title="4、找到SecureCRT会话配置文件"></a>4、找到SecureCRT会话配置文件</h2><p>Options-&gt;Global Options-&gt;Category-&gt;Configuration Paths-&gt;Configuration folder文件夹下的Sessions文件夹下对应的会话配置文件xxx.ini，并将其打开</p>
<h2 id="5、在SecureCRTCipher-py文件目录下cmd命令行窗口中执行命令即可查看明文："><a href="#5、在SecureCRTCipher-py文件目录下cmd命令行窗口中执行命令即可查看明文：" class="headerlink" title="5、在SecureCRTCipher.py文件目录下cmd命令行窗口中执行命令即可查看明文："></a>5、在SecureCRTCipher.py文件目录下cmd命令行窗口中执行命令即可查看明文：</h2><h3 id="如果内容像这样："><a href="#如果内容像这样：" class="headerlink" title="如果内容像这样："></a>如果内容像这样：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......S:&quot;Username&quot;=root</span><br><span class="line">S:&quot;Password&quot;=</span><br><span class="line">S:&quot;Password V2&quot;=02:7b9f594a1f39bb36bbaa0d9688ee38b3d233c67b338e20e2113f2ba4d328b6fc8c804e3c02324b1eaad57a5b96ac1fc5cc1ae0ee2930e6af2e5e644a28ebe3fc</span><br><span class="line">S:&quot;Login Script V2&quot;=</span><br></pre></td></tr></table></figure>
<p>则执行以下指令查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python SecureCRTCipher.py dec -v2 7b9f594a1f39bb36bbaa0d9688ee38b3d233c67b338e20e2113f2ba4d328b6fc8c804e3c02324b1eaad57a5b96ac1fc5cc1ae0ee2930e6af2e5e644a28ebe3fc</span><br></pre></td></tr></table></figure>
<h3 id="如果内容像这样：-1"><a href="#如果内容像这样：-1" class="headerlink" title="如果内容像这样："></a>如果内容像这样：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">S:&quot;Username&quot;=root</span><br><span class="line">D:&quot;[SSH2] Port&quot;=00000016</span><br><span class="line">S:&quot;Password&quot;=uc71bd1c86f3b804e42432f53247c50d9287f410c7e59166969acab69daa6eaadbe15c0c54c0e076e945a6d82f9e13df2</span><br><span class="line">D:&quot;Session Password Saved&quot;=00000001</span><br></pre></td></tr></table></figure>
<p>则执行以下指令查看：（命令行中字符串比Password中的字符串少个u）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python SecureCRTCipher.py dec c71bd1c86f3b804e42432f53247c50d9287f410c7e59166969acab69daa6eaadbe15c0c54c0e076e945a6d82f9e13df2</span><br></pre></td></tr></table></figure>

<p>注意：参数一定要和自己配置匹配，像我一开始没加-p参数就报错。Error: Failed to encrypt.</p>
<p>SecureCRTCipher.py文件内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, Blowfish</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCRTCrypto</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Initialize SecureCRTCrypto object.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.IV = <span class="string">b&#x27;\x00&#x27;</span> * Blowfish.block_size</span><br><span class="line">        self.Key1 = <span class="string">b&#x27;\x24\xA6\x3D\xDE\x5B\xD3\xB3\x82\x9C\x7E\x06\xF4\x08\x16\xAA\x07&#x27;</span></span><br><span class="line">        self.Key2 = <span class="string">b&#x27;\x5F\xB0\x45\xA2\x94\x17\xD9\x16\xC6\xC6\xA2\xFF\x06\x41\x82\xB7&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">self, Plaintext : <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Encrypt plaintext and return corresponding ciphertext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Plaintext: A string that will be encrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Hexlified ciphertext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        plain_bytes = Plaintext.encode(<span class="string">&#x27;utf-16-le&#x27;</span>)</span><br><span class="line">        plain_bytes += <span class="string">b&#x27;\x00\x00&#x27;</span></span><br><span class="line">        padded_plain_bytes = plain_bytes + os.urandom(Blowfish.block_size - <span class="built_in">len</span>(plain_bytes) % Blowfish.block_size)</span><br><span class="line"></span><br><span class="line">        cipher1 = Blowfish.new(self.Key1, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        cipher2 = Blowfish.new(self.Key2, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        <span class="keyword">return</span> cipher1.encrypt(os.urandom(<span class="number">4</span>) + cipher2.encrypt(padded_plain_bytes) + os.urandom(<span class="number">4</span>)).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>(<span class="params">self, Ciphertext : <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Decrypt ciphertext and return corresponding plaintext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Ciphertext: A hex string that will be decrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Plaintext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        cipher1 = Blowfish.new(self.Key1, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        cipher2 = Blowfish.new(self.Key2, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        ciphered_bytes = <span class="built_in">bytes</span>.fromhex(Ciphertext)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ciphered_bytes) &lt;= <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        padded_plain_bytes = cipher2.decrypt(cipher1.decrypt(ciphered_bytes)[<span class="number">4</span>:-<span class="number">4</span>])</span><br><span class="line">        </span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(padded_plain_bytes), <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> padded_plain_bytes[i] == <span class="number">0</span> <span class="keyword">and</span> padded_plain_bytes[i + <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        plain_bytes = padded_plain_bytes[<span class="number">0</span>:i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> plain_bytes.decode(<span class="string">&#x27;utf-16-le&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">raise</span>(ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCRTCryptoV2</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ConfigPassphrase : <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Initialize SecureCRTCryptoV2 object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            ConfigPassphrase: The config passphrase that SecureCRT uses. Leave it empty if config passphrase is not set.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.IV = <span class="string">b&#x27;\x00&#x27;</span> * AES.block_size</span><br><span class="line">        self.Key = SHA256.new(ConfigPassphrase.encode(<span class="string">&#x27;utf-8&#x27;</span>)).digest()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">self, Plaintext : <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Encrypt plaintext and return corresponding ciphertext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Plaintext: A string that will be encrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Hexlified ciphertext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        plain_bytes = Plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plain_bytes) &gt; <span class="number">0xffffffff</span>:</span><br><span class="line">            <span class="keyword">raise</span> OverflowError(<span class="string">&#x27;Plaintext is too long.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        plain_bytes = \</span><br><span class="line">            <span class="built_in">len</span>(plain_bytes).to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>) + \</span><br><span class="line">            plain_bytes + \</span><br><span class="line">            SHA256.new(plain_bytes).digest()</span><br><span class="line">        padded_plain_bytes = \</span><br><span class="line">            plain_bytes + \</span><br><span class="line">            os.urandom(AES.block_size - <span class="built_in">len</span>(plain_bytes) % AES.block_size)</span><br><span class="line">        cipher = AES.new(self.Key, AES.MODE_CBC, iv = self.IV)</span><br><span class="line">        <span class="keyword">return</span> cipher.encrypt(padded_plain_bytes).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>(<span class="params">self, Ciphertext : <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Decrypt ciphertext and return corresponding plaintext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Ciphertext: A hex string that will be decrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Plaintext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        cipher = AES.new(self.Key, AES.MODE_CBC, iv = self.IV)</span><br><span class="line">        padded_plain_bytes = cipher.decrypt(<span class="built_in">bytes</span>.fromhex(Ciphertext))</span><br><span class="line">        </span><br><span class="line">        plain_bytes_length = <span class="built_in">int</span>.from_bytes(padded_plain_bytes[<span class="number">0</span>:<span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        plain_bytes = padded_plain_bytes[<span class="number">4</span>:<span class="number">4</span> + plain_bytes_length]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plain_bytes) != plain_bytes_length:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        plain_bytes_digest = padded_plain_bytes[<span class="number">4</span> + plain_bytes_length:<span class="number">4</span> + plain_bytes_length + SHA256.digest_size]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plain_bytes_digest) != SHA256.digest_size:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> SHA256.new(plain_bytes).digest() != plain_bytes_digest:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> plain_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Help</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Usage:&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    SecureCRTCipher.py &lt;enc|dec&gt; [-v2] [-p ConfigPassphrase] &lt;plaintext|ciphertext&gt;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    &lt;enc|dec&gt;              &quot;enc&quot; for encryption, &quot;dec&quot; for decryption.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter must be specified.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    [-v2]                  Encrypt/Decrypt with &quot;Password V2&quot; algorithm.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter is optional.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    [-p ConfigPassphrase]  The config passphrase that SecureCRT uses.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter is optional.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    &lt;plaintext|ciphertext&gt; Plaintext string or ciphertext string.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           NOTICE: Ciphertext string must be a hex string.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter must be specified.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">EncryptionRoutine</span>(<span class="params">UseV2 : <span class="built_in">bool</span>, ConfigPassphrase : <span class="built_in">str</span>, Plaintext : <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> UseV2:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCryptoV2(ConfigPassphrase).Encrypt(Plaintext))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCrypto().Encrypt(Plaintext))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error: Failed to encrypt.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DecryptionRoutine</span>(<span class="params">UseV2 : <span class="built_in">bool</span>, ConfigPassphrase : <span class="built_in">str</span>, Ciphertext : <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> UseV2:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCryptoV2(ConfigPassphrase).Decrypt(Ciphertext))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCrypto().Decrypt(Ciphertext))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error: Failed to decrypt.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Main</span>(<span class="params">argc : <span class="built_in">int</span>, argv : <span class="built_in">list</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">3</span> &lt;= argc <span class="keyword">and</span> argc &lt;= <span class="number">6</span>:</span><br><span class="line">            bUseV2 = <span class="literal">False</span></span><br><span class="line">            ConfigPassphrase = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> argv[<span class="number">1</span>].lower() == <span class="string">&#x27;enc&#x27;</span>:</span><br><span class="line">                bEncrypt = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> argv[<span class="number">1</span>].lower() == <span class="string">&#x27;dec&#x27;</span>:</span><br><span class="line">                bEncrypt = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Help()</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            i = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; argc - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> argv[i].lower() == <span class="string">&#x27;-v2&#x27;</span>:</span><br><span class="line">                    bUseV2 = <span class="literal">True</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> argv[i].lower() == <span class="string">&#x27;-p&#x27;</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; argc - <span class="number">1</span>:</span><br><span class="line">                    ConfigPassphrase = argv[i + <span class="number">1</span>]</span><br><span class="line">                    i += <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Help()</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> bUseV2 == <span class="literal">False</span> <span class="keyword">and</span> <span class="built_in">len</span>(ConfigPassphrase) != <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Error: ConfigPassphrase is not supported if &quot;-v2&quot; is not specified&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> bEncrypt:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> EncryptionRoutine(bUseV2, ConfigPassphrase, argv[-<span class="number">1</span>]) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> DecryptionRoutine(bUseV2, ConfigPassphrase, argv[-<span class="number">1</span>]) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Help()</span><br><span class="line"></span><br><span class="line">    exit(Main(<span class="built_in">len</span>(sys.argv), sys.argv))</span><br><span class="line">	</span><br></pre></td></tr></table></figure>












]]></content>
  </entry>
</search>
